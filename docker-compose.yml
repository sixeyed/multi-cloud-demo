services:
  webapp:
    build: 
      context: ./src
      dockerfile: WebApp/Dockerfile
    image: ${REGISTRY:-docker.io}/${REPOSITORY:-sixeyed}/multi-cloud-demo-webapp:${TAG:-2507}
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__SqlServer=Server=sqlserver,1433;Database=MultiCloudDemo;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=true;
    depends_on:
      redis:
        condition: service_started
      sqlserver:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  backgroundworker:
    build:
      context: ./src
      dockerfile: BackgroundWorker/Dockerfile
    image: ${REGISTRY:-docker.io}/${REPOSITORY:-sixeyed}/multi-cloud-demo-backgroundworker:${TAG:-2507}
    environment:
      - DOTNET_ENVIRONMENT=Development
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__SqlServer=Server=sqlserver,1433;Database=MultiCloudDemo;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=true;
    depends_on:
      redis:
        condition: service_started
      sqlserver:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - app-network

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong!Passw0rd
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P YourStrong!Passw0rd -Q 'SELECT 1' -C || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  sqlserver_data:

networks:
  app-network:
    driver: bridge